The code:

# importing the nercessary items
import cv2 
import pyttsx3
import time
import numpy as np

# necessary variables
# all are set to false / none / empty
firstcap = None # first capture of the cam
motionstarttime = None # time when motion first detected
previousmovement = [] # list storing previous positions
motiondetection = False # boolean type - if we have detected motion
movementdur = 5  # time
mindistcovered = 100  # min distance (px)
alert = False # if alert already triggered

# starting speech
eng = pyttsx3.init() # setup of speech engine
eng.setProperty('rate', 150)  # alert speed

# starting video
cap = cv2.VideoCapture(0)  # default camera is 0

# func to calculate distance
def diffbetwpts(pts):
    # Calculate the distance covered between multiple points
    if len(pts) < 2:
        return 0 # if true, returns zero
        dist = 0 # var distance is 0
    for i in range(1, len(pts)): # for loop to calc dist b/w pts
        dist += np.linalg.norm(np.array(pts[i]) - np.array(pts[i - 1]))
        # Eucledian distance b/w 2 points
        # this is the shortest distance b/w two points
    return dist # returns total dist after loop

# func alert
def alertf(msg):
    eng.say(msg) # inc of argument: tells aloud msg
    eng.runAndWait()# waits until speech is finished until running the rest of the prog. else, it was a error

while True: # loop for app 
    # Read the current vdo from the video capture
    ret, vdo = cap.read()
    txt = "No roaming detected"

    # blur
    gray = cv2.cvtColor(vdo, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (21, 21), 0)

    # first vdo for detection
    if firstcap is None: # checks if initial frame is none
        firstcap = gray # FOR COMPARISON
        continue # continues to start and reduces system load
 
    # difference b/w the current vdo and the first vdo
    vdod = cv2.absdiff(firstcap, gray) # difference b/w pos
    thresh = cv2.threshold(vdod, 25, 255, cv2.THRESH_BINARY)[1] # isolating regions with max intensity
    thresh = cv2.dilate(thresh, None, iterations=2) # connects white regions and fills in holes in images

    # joins continuous points along same colour and intensity
    contours, _ = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # checking no of pixels in contour
    for contour in contours:
        if cv2.contourArea(contour) < 500:
            continue
        # drawing rectangle around the moving object
        (x, y, w, h) = cv2.boundingRect(contour)
        cv2.rectangle(vdo, (x, y), (x + w, y + h), (0, 255, 0), 1) 

        # calculating center of contour
        center = (int(x + w / 2), int(y + h / 2)) # finds midpoint
        previousmovement.append(center) # adds to track center list of previousmovements
# AadiDeyOPEncvsme00012561751
        # totaldist
        totaldist = diffbetwpts(previousmovement) # using the func to calc total dist by summing up positions

        # check if student roaming
        if not motiondetection: # if no motion detected earlier
            motiondetection = True # marks new motion start
            motionstarttime = time.time() # start of dtection ( current time recorded ) 
        else: # if motion already detected
            elapsed_time = time.time() - motionstarttime # calculates time through which motion is detected
            if elapsed_time >= movementdur and totaldist < mindistcovered:
                # checks if elepsed time exceedes duration threshold and if student has not moved far enough
                txt = "Strolling" 
                if not alert:
                    alertf("Get back!! You purposelessly strolling one.")
                    alert = True
                    motiondetection = False
                    previousmovement.clear()
                    firstcap = None  # reset
            else:
                txt = f"Distance: {totaldist:.2f} px" #########################

    # txt onscreen
    cv2.putText(vdo, txt, (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)# writing on vdo frame

    # disp 
    cv2.imshow("AadiDey BunkingStudents", vdo)

    # break loop
    if cv2.waitKey(1) & 0xFF == ord('x'): # pressing x ends the programe
        break

# destroy all windows
cap.release()
cv2.destroyAllWindows()